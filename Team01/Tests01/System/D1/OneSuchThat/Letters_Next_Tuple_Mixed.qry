1 - Next Statement Read
stmt s; read r;
Select <s, s.stmt#, r, r.stmt#, r.varName> such that Next(s, r)
ðŸ˜’
1000
1 - Next Statement Read
stmt s; read r;
Select <s, s.stmt#, r, r.stmt#, r.varName> such that Next(r, s)
ðŸ˜’
1000
1 - Next Read Print
read r; print p;
Select <r, r.stmt#, r.varName, p, p.stmt#, p.varName> such that Next(r, p)
ðŸ˜’
1000
1 - Next Read Print
read r; print p;
Select <r, r.stmt#, r.varName, p, p.stmt#, p.varName> such that Next(p, r)
ðŸ˜’
1000
1 - Next Print Call
print p; call c;
Select <p, p.stmt#, p.varName, c, c.stmt#, c.procName> such that Next(p, c)
ðŸ˜’
1000
1 - Next Print Call
print p; call c;
Select <p, p.stmt#, p.varName, c, c.stmt#, c.procName> such that Next(c, p)
ðŸ˜’
1000
1 - Next Call While
call c; while w;
Select <c, c.stmt#, c.procName, w, w.stmt#> such that Next(c, w)
ðŸ˜’
1000
1 - Next Call While
call c; while w;
Select <c, c.stmt#, c.procName, w, w.stmt#> such that Next(w, c)
ðŸ˜’
1000
1 - Next While If
while w; if i;
Select <w, w.stmt#, i, i.stmt#> such that Next(w, i)
ðŸ˜’
1000
1 - Next While If
while w; if i;
Select <w, w.stmt#, i, i.stmt#> such that Next(i, w)
ðŸ˜’
1000
1 - Next If Assign
if i; assign a;
Select <i, i.stmt#, a, a.stmt#> such that Next(i, a)
ðŸ˜’
1000
1 - Next If Assign
if i; assign a;
Select <i, i.stmt#, a, a.stmt#> such that Next(a, i)
ðŸ˜’
1000
1 - Next Assign ProgLine
assign a; prog_line n;
Select <a, a.stmt#, n> such that Next(a, n)
ðŸ˜’
1000
1 - Next Assign ProgLine
assign a; prog_line n;
Select <a, a.stmt#, n> such that Next(n, a)
ðŸ˜’
1000
1 - Next ProgLine Statement
prog_line n; stmt s;
Select <n, s, s.stmt#> such that Next(n, s)
ðŸ˜’
1000
1 - Next ProgLine Statement
prog_line n; stmt s;
Select <n, s, s.stmt#> such that Next(s, n)
ðŸ˜’
1000
